20.有效的括号

题目：
给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。

有效字符串需满足：

左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。
注意空字符串可被认为是有效字符串。

示例 1:

输入: "()"
输出: true
示例 2:

输入: "()[]{}"
输出: true
示例 3:

输入: "(]"
输出: false
示例 4:

输入: "([)]"
输出: false
示例 5:

输入: "{[]}"
输出: true

思路：
由题目可知，每种括号必须成对出现，并且左括号必须在前，右括号在后。根据这些特性，我们可以
使用栈来解决这个问题。当遇到左括号时，将字符入栈，遇到对应的右括号时，将相应的字符退栈。
对整个字符串进行遍历，如最后栈空，则该字符串是有效字符串；否则为无效字符串。

代码：
class Solution {
public:
    bool isValid(string s) {
        stack<char> temp;
        int n=s.length();
        for(int i=0;i<n;i++)
        {
            if(s[i]=='(' || s[i]=='[' || s[i]=='{')
            {
                temp.push(s[i]);
            }
            else
            {
                if(temp.empty())
                {
                    return false;
                }
                else
                {
                    if(s[i]==')' && temp.top()!='(' ||s[i]==']' && temp.top()!='[' || s[i]=='}' && temp.top()!='{')
                    {
                        return false;
                    }
                    temp.pop();
                }
            }
        }
        return temp.empty();
    }
};
