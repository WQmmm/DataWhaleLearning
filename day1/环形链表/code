141.环形链表
题目：
给定一个链表，判断链表中是否有环。

为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。

示例 1：

输入：head = [3,2,0,-4], pos = 1
输出：true
解释：链表中有一个环，其尾部连接到第二个节点。

示例 2：

输入：head = [1,2], pos = 0
输出：true
解释：链表中有一个环，其尾部连接到第一个节点。

思路：
在做这道题的时候，借鉴了剑指offer中所提到的一种思想，使用两个指针，
令其中的一个指针走得快一些，另一个指针走得慢一些，如果这个链表为
环形链表，那么这两个指针一定会相遇。

代码：
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
       if(head == NULL||head->next == NULL)
           return false;
        ListNode* fast=head;
        ListNode* slow=head;
        while(fast->next != NULL && fast->next->next != NULL)
        {            
            fast = fast->next->next;
            slow = slow->next;
            if(fast == slow)
                return true;
        }
        return false;
    }
};
